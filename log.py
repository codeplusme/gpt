import config


def write_to_log(code_tag: str, user_input: str = '', response: object = '', **kwargs: object) -> object:
	"""
	Writes logs of interactions and metadata to a log file.

	This function is responsible for writing metadata, user input, and system responses to a designated log file.
	If the same response has already been logged, it optimizes the output to not repeat unnecessary information.

	:rtype: object
	:param code_tag: Identifier for the code section or functionality.
	:type code_tag: str
	:param user_input: The input provided by the user. Defaults to an empty string.
	:type user_input: str
	:param response: The response generated by the system. Defaults to an empty string.
	:type response: str
	:param kwargs: Additional optional metadata to log.
	:type kwargs: dict

	:Example:

	>>> write_to_log("INFO", user_input="hello", response="Hi there!")
	Writes a log entry indicating an informational interaction where the user greeted and the system responded.

	.. note:: This function relies on the `config` module for certain configurations such as `response_count` and `log_filename`.
	"""
	lines = {"code_tag": code_tag + '[' + str(config.response_count) + ']', "user_input": user_input,
	         "prompt": '"' + repr(config.prompt.strip()) + '"',
	         "response": response}
	if config.logged_response_count == config.response_count:
		ks = list(lines)
		for k in ks:
			if config.last_logged.get(k, '') == lines[k]:
				del lines[k]
			else:
				config.last_logged[k] = lines[k]
	else:
		config.last_logged = lines

	text = '\n'.join([key + ':' + str(var) for d in [lines, kwargs] for key, var in d.items() if var])
	text += '\n\n'
	if config.logged_response_count != config.response_count:
		text = '\n' + '-' * 25 + '#' + str(config.response_count) + '\n'
		config.last_logged = lines

	with open(config.log_filename, 'a') as file:
		file.write(text)
	config.logged_response_count = config.response_count
